https://andrew0409.tistory.com/153
코드 상세 설명 포함

https://seolin.tistory.com/97
(중요)소켓 작동방식 그림 포함

https://webnautes.tistory.com/1381
소켓 패키지 관련 코드에 주석 다수와 이미지 포함

https://smoothiecoding.kr/python-socket-programming/
아주 간단한 코드만 포함

https://docs.python.org/ko/3/library/socket.html
수준높은 기술적 번역 포함

https://m.blog.naver.com/nonamed0000/221259426463
즉시 적용 가능한 간단한 코드와 실습화면 포함

___________________________________________________________________
socket 모듈 (https://bnzn2426.tistory.com/53)

	socket.socket()
	소켓 객체를 생성하는 함수
	첫 번째 인자-family : 주소 체계를 지정하는 인자로 
	socket.AF_INET = IP4v, socket.AF_INET6 = IP6v에 많이 쓰임
	두 번째 인자-type : 소켓의 타입으로 raw 소켓, 스트림 소켓, 데이터그램 소켓 등이 있다.

	with ~ as ~:
	파일이나 소켓을 with as 구문으로 생성하면 후에
	소멸을 close() 메소드를 호출하지 않아도 인터프리터가 자동으로 해준다.

	socket.bind()
	클라이언트에서는 필요 없고 서버를 만들 때 필요한 메소드로 튜플 형식을 받게 되있다.
	튜플의 앞 부분-ip address    :    "(공백)을 입력하면 루프 백 주소로 자기 자신을 의미한다.
	튜플의 뒷 부분 - port number

	socket.connet()
	클라이언트에서 서버에 접속하기 위해 AF가 인자로 들어가는데, 
	(호스트 주소, 포트번호)로 구성된 튜플을 인자로 전달한다.

	socket.listen()
	서버가 데이터 수신을 기다리는 상태로 인자 값으로 들어가는 숫자는 
	해당 소켓이 몇 개의 동시접속을 허용할 것이냐는 의미이다.

	socket.accept()
	소켓에 누군가가 접속하여 연결되었을 때 결과 값이 튜플로 return 되는 함수다. 
	return 값은 새로운 소켓과 상대방의 AF(Address Family)를 전달한다.
	이 이후 부터의 데이터 송수신은 새로운 소켓을 이용한다.

	socket.sendall(), socket.recv()
	데이터를 송수신 하는 메소드다.
	여기서 몇 가지 주의해야 할 점은 클라이언트는 기존의 소켓으로 송수신을 하는 반면, 
	서버는 accpet()로 생성된 소켓으로 송수신을 한다는 것이다.
	그리고 문자열을 전송할 때 encode()를 수행해 줘야 하는데, 
	이 encode() 메소드는 문자열을 byte로 변환해주는 메소드다.
	파이썬 내부에서 생성된 문자열은 파이썬에서 생성된 객체이므로 전송 계층에 
	문자열을 그대로 보내면 에러가 발생한다.
	물론 이 문자열을 읽어 출력할 때는 decode()를 사용해야 한다.
	마지막으로 소켓은 턴 바이 턴 형식이기 때문에 데이터를 한 번 송신하면 다음은 수신을 해야 한다.


argparse 모듈(이해를 하지 못해 정리를 하지 못함 나중에 쓰일 수도 있을거 같아서 일단은 링크를 정리해놓음)
	-https://greeksharifa.github.io/references/2019/02/12/argparse-usage/
	-https://bnzn2426.tistory.com/51
_____________________________________________________________________________________________


ipaddress 모듈(https://hi0seon.tistory.com/entry/%EC%BB%B4%ED%93%A8%ED%84%B0-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%B0%8F-%EC%8B%A4%EC%8A%B5-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%AA%A8%EB%93%88)
	
	ipaddress.ip_address()
	- IP 주소 객체 생성
	IPv4, IPv6 자동 인식
	예) IPv4, IPv6 호스트 주소 객체 직접 생성
		- ipaddress.IPv4Address('192.168.0.1')
		- ipaddress.IPv6Address('2001:ab8::2000')

	
	IP주소 속성
	- 주소 객체 속성을 이용하면 주소 속성 접근 가능
		-is_multicast 멀티캐스트 주소인지
		-is_private   사설망 주소이면 T
		-is_global    공중망 주소이면
		-is_unspecified   주소 용도가 지정 안되어있으면 T
		-is_reserved    유보된 주소이면 T
		-is_loopback    루프백 주소이면 T
	
	- addr = ipaddress.ip_address('127.0.0.1')
	- addr.version => 4
	IP 주소 객체의 version을 알려준다(IPv4, IPv6)